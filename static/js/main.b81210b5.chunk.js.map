{"version":3,"sources":["reportWebVitals.ts","style/index.ts","index.tsx","components/Layout/index.tsx","containers/pages/index.tsx","containers/index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Wrapper","styled","div","isFullScreen","height","isExpansion","Viewer","PagesWrapper","currentPage","pageWidth","switchingFullScreen","NavigationButton","a","navigation","Page","width","Img","img","isOdd","isSingleView","Controller","aside","SubController","MainController","RangeInput","input","ScaleController","ControlButton","button","CloseButton","ComicViewer","direction","initialCurrentPage","initialIsExpansion","onChangeCurrentPage","onChangeExpansion","pagesProp","pages","switchingRatio","text","expansion","fullScreen","move","normal","useMemo","reversePages","slice","reverse","length","expansionText","useState","windowHeight","setWindowHeight","windowWidth","setWindowWidth","useWindowSize","innerHeight","innerWidth","setIsExpansion","setSwitchingFullScreen","handle","useFullScreenHandle","active","enter","exit","handleClickOnExpansion","useCallback","prevIsExpansion","handleClickOnFullScreen","handleClickOnClose","expansionIcon","color","size","items","map","page","index","alt","src","uniqid","setPrevIsExpansion","setCurrentPage","disabledNextPage","handleClickOnNextPage","prevCurrentPage","disabledPrevPage","handleClickOnPrevPage","showMove","setShowMove","handleClickOnShowMove","handleChange","value","currentTarget","parseInt","handleClickOnOutside","useOutsideClickRef","ref","handlers","useSwipeable","onSwipedLeft","onSwipedRight","useEffect","undefined","Math","floor","useDidUpdate","onClick","onChange","max","ceil","min","step","type","Layout","children","style","minHeight","Pages","console","log","render","document","getElementById"],"mappings":"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","file":"static/js/main.b81210b5.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  isExpansion: boolean;\n  isFullScreen: boolean;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  background: #333;\n  color: #fff;\n  display: grid;\n  grid-template: ${({ isFullScreen }) =>\n    `1fr ${isFullScreen ? \"0\" : \"40px\"} / 1fr`};\n  height: ${({ height, isExpansion }) =>\n    `${height - (isExpansion ? 0 : 95)}px`};\n  max-height: ${({ height, isExpansion }) => `${isExpansion ? height : 840}px`};\n  min-height: ${({ isExpansion }) => `${isExpansion ? 0 : 440}px`};\n  overflow: hidden;\n  position: relative;\n  transition: 250ms;\n`;\n\nexport const Viewer = styled.div`\n  height: 100%;\n  position: relative;\n`;\n\nexport type PagesWrapperProps = {\n  currentPage: number;\n  pageWidth: number;\n  switchingFullScreen: boolean;\n};\n\nexport const PagesWrapper = styled.div<PagesWrapperProps>`\n  direction: rtl;\n  display: grid;\n  grid-auto-flow: column;\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  transform: translateX(\n    calc(${({ currentPage, pageWidth }) => `${currentPage * pageWidth}px`})\n  );\n  transition: ${({ switchingFullScreen }) =>\n    `${switchingFullScreen ? 0 : 250}ms`};\n`;\n\nexport type NavigationButtonProps = {\n  navigation: \"next\" | \"prev\";\n};\n\nexport const NavigationButton = styled.a<NavigationButtonProps>`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  display: flex;\n  height: 100%;\n  justify-content: ${({ navigation }) =>\n    navigation === \"next\" ? \"flex-start\" : \"flex-end\"};\n  opacity: 0.5;\n  right: ${({ navigation }) => (navigation === \"next\" ? \"auto\" : \"0\")};\n  padding: 0;\n  position: absolute;\n  transition: 250ms;\n  width: calc(100% / 3);\n  :hover {\n    opacity: 1;\n  }\n  @media (max-width: 980px) {\n    opacity: 0;\n    :hover {\n      opacity: 0;\n    }\n  }\n`;\n\nexport type PageProps = {\n  width: number;\n};\n\nexport const Page = styled.div<PageProps>`\n  overflow: hidden;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport type ImgProps = {\n  isOdd: boolean;\n  isSingleView: boolean;\n};\n\nexport const Img = styled.img<ImgProps>`\n  height: 100%;\n  object-fit: contain;\n  object-position: ${({ isOdd, isSingleView }) =>\n    isSingleView ? \"center\" : isOdd ? \"left\" : \"right\"};\n  width: 100%;\n`;\n\nexport const Controller = styled.aside`\n  bottom: 0;\n  box-sizing: border-box;\n  height: 40px;\n  left: 0;\n  padding: 0 16px;\n  position: absolute;\n  width: 100%;\n`;\n\nexport const SubController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n`;\n\nexport const MainController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n`;\n\nexport const RangeInput = styled.input`\n  cursor: pointer;\n  max-width: 1024px;\n  transform: rotate(180deg);\n  width: 100%;\n`;\n\nexport const ScaleController = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  height: 100%;\n`;\n\nexport const ControlButton = styled.button`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  color: #ccc;\n  cursor: pointer;\n  display: grid;\n  font-size: 14px;\n  gap: 8px;\n  grid-template: auto / auto auto;\n  height: 100%;\n  outline: none;\n`;\n\nexport const CloseButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 12px 12px;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n","import React, {\n  ComponentPropsWithoutRef,\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  CloseButton,\n  ControlButton,\n  Controller,\n  Img,\n  ImgProps,\n  MainController,\n  NavigationButton,\n  Page,\n  PageProps,\n  PagesWrapper,\n  PagesWrapperProps,\n  RangeInput,\n  ScaleController,\n  SubController,\n  Viewer,\n  Wrapper,\n  WrapperProps,\n} from \"./style\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport uniqid from \"uniqid\";\nimport {\n  BiChevronLeft,\n  BiChevronRight,\n  BiCollapse,\n  BiExpand,\n  BiFullscreen,\n  BiMoveHorizontal,\n} from \"react-icons/bi\";\nimport useOutsideClickRef from \"@rooks/use-outside-click-ref\";\nimport { CgClose } from \"react-icons/cg\";\nimport { useSwipeable } from \"react-swipeable\";\nimport useWindowSize from \"@rooks/use-window-size\";\nimport useDidUpdate from \"@rooks/use-did-update\";\nimport NoSSR from \"@mpth/react-no-ssr\";\n\nexport type ComicViewerProps = {\n  direction?: \"ltr\" | \"rtl\";\n  initialCurrentPage?: number;\n  initialIsExpansion?: boolean;\n  onChangeCurrentPage?: (currentPage: number) => void;\n  onChangeExpansion?: (isExpansion: boolean) => void;\n  pages: Array<string | ReactNode>;\n  switchingRatio?: number;\n  text?: Record<\"expansion\" | \"fullScreen\" | \"move\" | \"normal\", string>;\n};\n\nconst ComicViewer: FC<ComicViewerProps> = ({\n  direction = \"rtl\",\n  initialCurrentPage = 0,\n  initialIsExpansion = false,\n  onChangeCurrentPage,\n  onChangeExpansion,\n  pages: pagesProp,\n  switchingRatio = 1,\n  text = {\n    expansion: \"Expansion\",\n    fullScreen: \"Full screen\",\n    move: \"Move\",\n    normal: \"Normal\",\n  },\n}: ComicViewerProps) => {\n  const pages = useMemo(() => {\n    if (direction === \"rtl\") {\n      return pagesProp;\n    }\n\n    const reversePages = pagesProp.slice().reverse();\n\n    return reversePages.length % 2 ? [null, ...reversePages] : reversePages;\n  }, [direction, pagesProp]);\n  const {\n    expansion: expansionText,\n    fullScreen,\n    move,\n    normal,\n  } = useMemo(() => text, [text]);\n  const [windowHeight, setWindowHeight] = useState(0);\n  const [windowWidth, setWindowWidth] = useState(0);\n  const { innerHeight, innerWidth } = useWindowSize();\n  const [isExpansion, setIsExpansion] =\n    useState<WrapperProps[\"isExpansion\"]>(initialIsExpansion);\n  const [switchingFullScreen, setSwitchingFullScreen] =\n    useState<PagesWrapperProps[\"switchingFullScreen\"]>(false);\n  const handle = useFullScreenHandle();\n  const { active, enter, exit } = useMemo(() => handle, [handle]);\n  const handleClickOnExpansion = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setIsExpansion((prevIsExpansion) => !prevIsExpansion);\n  }, []);\n  const handleClickOnFullScreen = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    enter();\n  }, [enter]);\n  const handleClickOnClose = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    exit();\n  }, [exit]);\n  const pageWidth = useMemo<PageProps[\"width\"]>(\n    () =>\n      windowHeight > windowWidth * switchingRatio\n        ? windowWidth\n        : windowWidth / 2,\n    [switchingRatio, windowHeight, windowWidth]\n  );\n  const expansion = useMemo<ComponentPropsWithoutRef<\"button\">[\"children\"]>(\n    () => (isExpansion ? normal : expansionText),\n    [expansionText, isExpansion, normal]\n  );\n  const expansionIcon = useMemo(\n    () =>\n      isExpansion ? (\n        <BiCollapse color=\"#fff\" size={24} />\n      ) : (\n        <BiExpand color=\"#fff\" size={24} />\n      ),\n    [isExpansion]\n  );\n  const isSingleView = useMemo<ImgProps[\"isSingleView\"]>(\n    () => windowHeight > windowWidth * switchingRatio,\n    [switchingRatio, windowHeight, windowWidth]\n  );\n  const items = useMemo(\n    () =>\n      pages.map((page, index) => (\n        <Page key={uniqid()} width={pageWidth}>\n          {typeof page === \"string\" ? (\n            <Img\n              alt={page}\n              isOdd={!(index % 2)}\n              isSingleView={isSingleView}\n              src={page}\n            />\n          ) : (\n            page\n          )}\n        </Page>\n      )),\n    [isSingleView, pageWidth, pages]\n  );\n  const [prevIsExpansion, setPrevIsExpansion] = useState<\n    typeof isExpansion | undefined\n  >();\n  const [currentPage, setCurrentPage] = useState(\n    direction === \"rtl\"\n      ? initialCurrentPage\n      : pages.length - initialCurrentPage - 1\n  );\n  const disabledNextPage = useMemo(\n    () =>\n      (isSingleView && currentPage >= pages.length - 1) ||\n      (!isSingleView && currentPage >= pages.length - 2),\n    [currentPage, isSingleView, pages.length]\n  );\n  const handleClickOnNextPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledNextPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n    );\n  }, [disabledNextPage, isSingleView]);\n  const disabledPrevPage = useMemo(() => currentPage === 0, [currentPage]);\n  const handleClickOnPrevPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledPrevPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n    );\n  }, [disabledPrevPage, isSingleView]);\n  const [showMove, setShowMove] = useState(false);\n  const handleClickOnShowMove = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setShowMove(true);\n  }, []);\n  const handleChange = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"input\">[\"onChange\"]>\n  >(\n    ({ currentTarget: { value } }) => {\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        isSingleView ? parseInt(value, 10) - 1 : (parseInt(value, 10) - 1) * 2\n      );\n    },\n    [isSingleView]\n  );\n  const handleClickOnOutside = useCallback(() => {\n    setShowMove(false);\n  }, []);\n  const [ref] = useOutsideClickRef(handleClickOnOutside);\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (disabledPrevPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n      );\n    },\n    onSwipedRight: () => {\n      if (disabledNextPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n      );\n    },\n  });\n\n  useEffect(() => {\n    if (!active) {\n      if (typeof prevIsExpansion !== \"boolean\") {\n        return;\n      }\n\n      setPrevIsExpansion(undefined);\n      setIsExpansion(prevIsExpansion);\n\n      return;\n    }\n\n    if (typeof prevIsExpansion === \"boolean\") {\n      return;\n    }\n\n    setPrevIsExpansion(isExpansion);\n    setIsExpansion(true);\n  }, [active, isExpansion, prevIsExpansion]);\n\n  useEffect(() => {\n    if (isSingleView) {\n      return;\n    }\n\n    setCurrentPage((prevCurrentPage) => Math.floor(prevCurrentPage / 2) * 2);\n  }, [isSingleView]);\n\n  useEffect(() => {\n    if (typeof innerHeight !== \"number\") {\n      return;\n    }\n\n    setWindowHeight(innerHeight);\n  }, [innerHeight]);\n\n  useEffect(() => {\n    if (typeof innerWidth !== \"number\") {\n      return;\n    }\n\n    setWindowWidth(innerWidth);\n  }, [innerWidth]);\n\n  useDidUpdate(() => {\n    if (!onChangeCurrentPage) {\n      return;\n    }\n\n    onChangeCurrentPage(currentPage);\n  }, [currentPage, onChangeCurrentPage]);\n\n  useDidUpdate(() => {\n    if (!onChangeExpansion) {\n      return;\n    }\n\n    onChangeExpansion(isExpansion);\n  }, [isExpansion, onChangeExpansion]);\n\n  return (\n    <NoSSR>\n      <FullScreen handle={handle}>\n        <Wrapper\n          height={windowHeight}\n          isExpansion={isExpansion}\n          isFullScreen={active}\n          {...handlers}\n        >\n          <Viewer>\n            <PagesWrapper\n              currentPage={currentPage}\n              pageWidth={pageWidth}\n              switchingFullScreen={switchingFullScreen}\n            >\n              {items}\n            </PagesWrapper>\n            {disabledNextPage ? null : (\n              <NavigationButton\n                navigation=\"next\"\n                onClick={handleClickOnNextPage}\n              >\n                <BiChevronLeft color=\"#888\" size={64} />\n              </NavigationButton>\n            )}\n            {disabledPrevPage ? null : (\n              <NavigationButton\n                navigation=\"prev\"\n                onClick={handleClickOnPrevPage}\n              >\n                <BiChevronRight color=\"#888\" size={64} />\n              </NavigationButton>\n            )}\n          </Viewer>\n          {active ? (\n            <CloseButton onClick={handleClickOnClose}>\n              <CgClose color=\"#fff\" size={36} />\n            </CloseButton>\n          ) : (\n            <Controller>\n              {showMove ? (\n                <SubController ref={ref}>\n                  <RangeInput\n                    onChange={handleChange}\n                    max={\n                      isSingleView ? pages.length : Math.ceil(pages.length / 2)\n                    }\n                    min={1}\n                    step={1}\n                    type=\"range\"\n                    value={\n                      isSingleView\n                        ? currentPage + 1\n                        : Math.floor(currentPage / 2) + 1\n                    }\n                  />\n                </SubController>\n              ) : (\n                <MainController>\n                  <ScaleController>\n                    <ControlButton onClick={handleClickOnExpansion}>\n                      {expansionIcon}\n                      {expansion}\n                    </ControlButton>\n                    <ControlButton onClick={handleClickOnFullScreen}>\n                      <BiFullscreen color=\"#fff\" size={24} />\n                      {fullScreen}\n                    </ControlButton>\n                  </ScaleController>\n                  <ControlButton onClick={handleClickOnShowMove}>\n                    <BiMoveHorizontal color=\"#fff\" size={24} />\n                    {move}\n                  </ControlButton>\n                </MainController>\n              )}\n            </Controller>\n          )}\n        </Wrapper>\n      </FullScreen>\n    </NoSSR>\n  );\n};\n\nexport default ComicViewer;\n","import { ComponentPropsWithoutRef, FC, useMemo } from \"react\";\nimport useWindowSize from \"@rooks/use-window-size\";\n\nconst Layout: FC = ({ children }) => {\n  const { innerHeight } = useWindowSize();\n  const style = useMemo<ComponentPropsWithoutRef<\"div\">[\"style\"]>(\n    () => ({\n      minHeight: innerHeight || 0,\n    }),\n    [innerHeight]\n  );\n\n  return <div style={style}>{children}</div>;\n};\n\nexport default Layout;\n","import ComicViewer from \"index\";\nimport Layout from \"components/Layout\";\nimport React, { FC } from \"react\";\n\nconst Pages: FC = () => (\n  <Layout>\n    <ComicViewer\n      direction=\"ltr\"\n      initialCurrentPage={2}\n      initialIsExpansion={true}\n      onChangeCurrentPage={(currentPage) => {\n        console.log(currentPage);\n      }}\n      onChangeExpansion={(isExpansion) => {\n        console.log(isExpansion);\n      }}\n      pages={[\n        \"/comics/0.jpg\",\n        \"/comics/1.jpg\",\n        \"/comics/2.jpg\",\n        \"/comics/3.jpg\",\n        \"/comics/4.jpg\",\n        \"/comics/5.jpg\",\n        \"/comics/6.jpg\",\n      ]}\n      switchingRatio={0.75}\n      text={{\n        expansion: \"拡大\",\n        fullScreen: \"全画面\",\n        move: \"移動\",\n        normal: \"通常\",\n      }}\n    />\n    <p>\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n    </p>\n  </Layout>\n);\n\nexport default Pages;\n","import React, { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\nimport Pages from \"./pages\";\nimport \"./styles/global.scss\";\n\nrender(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}