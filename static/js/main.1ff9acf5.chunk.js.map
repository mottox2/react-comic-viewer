{"version":3,"sources":["reportWebVitals.ts","style/index.ts","index.tsx","components/Layout/index.tsx","containers/pages/index.tsx","containers/index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Wrapper","styled","div","isFullScreen","height","isExpansion","Viewer","PagesWrapper","currentPage","pageWidth","switchingFullScreen","NavigationButton","a","navigation","Page","width","Img","img","isOdd","isSingleView","Controller","aside","SubController","MainController","RangeInput","input","ScaleController","ControlButton","button","CloseButton","ComicViewer","direction","initialCurrentPage","initialIsExpansion","onChangeCurrentPage","onChangeExpansion","pagesProp","pages","switchingRatio","text","expansion","fullScreen","move","normal","isRightToLeft","useMemo","expansionText","useWindowSize","useState","setIsExpansion","setSwitchingFullScreen","handle","useFullScreenHandle","active","enter","exit","handleClickOnExpansion","useCallback","prevIsExpansion","handleClickOnFullScreen","handleClickOnClose","expansionIcon","color","size","reversePages","slice","reverse","length","items","map","page","index","alt","src","nanoid","setPrevIsExpansion","Math","floor","setCurrentPage","disabledNextPage","handleClickOnNextPage","prevCurrentPage","disabledPrevPage","handleClickOnPrevPage","showMove","setShowMove","handleClickOnShowMove","handleChange","value","currentTarget","parseInt","handleClickOnOutside","useOutsideClickRef","ref","handlers","useSwipeable","onSwipedLeft","onSwipedRight","isEnabled","screenfull","useEffect","undefined","useDidUpdate","ceil","onClick","onChange","max","min","step","type","NoSSRComicViewer","props","window","Layout","children","onlyHeight","useWindowHeight","style","minHeight","Pages","console","log","render","document","getElementById"],"mappings":"wMAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qCCDDQ,EAAUC,IAAOC,IAAV,oOAID,gBAAGC,EAAH,EAAGA,aAAH,oBACRA,EAAe,IAAM,OADb,aAEP,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAX,gBACLD,GAAUC,EAAc,EAAI,IADvB,SAEI,gBAAGD,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAX,gBAAgCA,EAAcD,EAAS,IAAvD,SACA,gBAAGC,EAAH,EAAGA,YAAH,gBAAwBA,EAAc,EAAI,IAA1C,SAMHC,EAASL,IAAOC,IAAV,oEAWNK,EAAeN,IAAOC,IAAV,yOASd,gBAAGM,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,UAAhB,gBAAmCD,EAAcC,EAAjD,SAEK,gBAAGC,EAAH,EAAGA,oBAAH,gBACTA,EAAsB,EAAI,IADjB,SAQHC,EAAmBV,IAAOW,EAAV,maAOR,kBACF,SADE,EAAGC,WACI,aAAe,cAEhC,kBAAoC,SAApC,EAAGA,WAA0C,OAAS,OAoBpDC,EAAOb,IAAOC,IAAV,gEAEN,gBAAGa,EAAH,EAAGA,MAAH,gBAAkBA,EAAlB,SAQEC,EAAMf,IAAOgB,IAAV,8GAGK,gBAAGC,EAAH,EAAGA,MAAH,SAAUC,aACZ,SAAWD,EAAQ,OAAS,WAIlCE,EAAanB,IAAOoB,MAAV,6JAUVC,EAAgBrB,IAAOC,IAAV,mHAObqB,EAAiBtB,IAAOC,IAAV,0HAOdsB,EAAavB,IAAOwB,MAAV,oHAOVC,EAAkBzB,IAAOC,IAAV,uGAOfyB,EAAgB1B,IAAO2B,OAAV,4PAcbC,EAAc5B,IAAO2B,OAAV,gK,sFClGxB,SAASE,EAAT,GAcmC,IAAD,IAbhCC,iBAagC,MAbpB,MAaoB,MAZhCC,0BAYgC,MAZX,EAYW,MAXhCC,0BAWgC,SAVhCC,EAUgC,EAVhCA,oBACAC,EASgC,EAThCA,kBACOC,EAQyB,EARhCC,MAQgC,IAPhCC,sBAOgC,MAPf,EAOe,MANhCC,YAMgC,MANzB,CACLC,UAAW,YACXC,WAAY,cACZC,KAAM,OACNC,OAAQ,UAEsB,EAC1BC,EAAgBC,mBAAQ,iBAAoB,QAAdd,IAAqB,CAACA,IAC1D,EAKIc,mBAAQ,kBAAMN,IAAM,CAACA,IAJZO,EADb,EACEN,UACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,KACAC,EAJF,EAIEA,OAEF,EAAwBI,cAAxB,mBAAOhC,EAAP,KAAcX,EAAd,KACA,EACE4C,mBAAsCf,GADxC,mBAAO5B,EAAP,KAAoB4C,GAApB,KAEA,GACED,oBAAmD,GADrD,qBAAOtC,GAAP,MAA4BwC,GAA5B,MAEMC,GAASC,cACf,GAAgCP,mBAAQ,kBAAMM,KAAQ,CAACA,KAA/CE,GAAR,GAAQA,OAAQC,GAAhB,GAAgBA,MAAOC,GAAvB,GAAuBA,KACjBC,GAAyBC,uBAE7B,WACAR,IAAe,SAACS,GAAD,OAAsBA,OACpC,IACGC,GAA0BF,uBAE9B,WACAP,IAAuB,GAEvBI,OACC,CAACA,KACEM,GAAqBH,uBAEzB,WACAP,IAAuB,GAEvBK,OACC,CAACA,KACE9C,GAAYoC,mBAChB,kBAAOzC,EAASW,EAAQuB,EAAiBvB,EAAQA,EAAQ,IACzD,CAACuB,EAAgBlC,EAAQW,IAErByB,GAAYK,mBAChB,kBAAOxC,EAAcsC,EAASG,IAC9B,CAACA,EAAezC,EAAasC,IAEzBkB,GAAgBhB,mBACpB,kBACExC,EACE,cAAC,IAAD,CAAYyD,MAAM,OAAOC,KAAM,KAE/B,cAAC,IAAD,CAAUD,MAAM,OAAOC,KAAM,OAEjC,CAAC1D,IAEGc,GAAe0B,mBACnB,kBAAMzC,EAASW,EAAQuB,IACvB,CAACA,EAAgBlC,EAAQW,IAErBsB,GAAQQ,mBAAQ,WACpB,GAAID,EACF,OAAOR,EAGT,IAAM4B,EAAe5B,EAAU6B,QAAQC,UAEvC,OAAI/C,IAAgB6C,EAAaG,OAAS,IAAM,EACvCH,EAGH,CAAE,MAAR,mBAAiBA,MAChB,CAACpB,EAAezB,GAAciB,IAC3BgC,GAAQvB,mBACZ,kBACER,GAAMgC,KAAI,SAACC,EAAMC,GAAP,OACR,cAACzD,EAAD,CAAqBC,MAAON,GAA5B,SACmB,kBAAT6D,EACN,cAACtD,EAAD,CACEwD,IAAKF,EACLpD,QAASqD,EAAQ,GACjBpD,aAAcA,GACdsD,IAAKH,IAGPA,GATOI,oBAaf,CAACvD,GAAcV,GAAW4B,KAE5B,GAA8CW,qBAA9C,qBAAOU,GAAP,MAAwBiB,GAAxB,MAGA,GAAsC3B,oBAAS,WAC7C,IAAMxC,EAAcoC,EAChBZ,EACAK,GAAM8B,OAASnC,EAAqB,EAExC,OAAOb,GAAeX,EAA4C,EAA9BoE,KAAKC,MAAMrE,EAAc,MAL/D,qBAAOA,GAAP,MAAoBsE,GAApB,MAOMC,GAAmBlC,mBACvB,kBACG1B,IAAgBX,IAAe6B,GAAM8B,OAAS,IAC7ChD,IAAgBX,IAAe6B,GAAM8B,OAAS,IAClD,CAAC3D,GAAaW,GAAckB,GAAM8B,SAE9Ba,GAAwBvB,uBAE5B,WACIsB,KAIJ7B,IAAuB,GACvB4B,IACE,SAACG,GAAD,OAAqBA,GAAmB9D,GAAe,EAAI,SAE5D,CAAC4D,GAAkB5D,KAChB+D,GAAmBrC,mBAAQ,kBAAsB,IAAhBrC,KAAmB,CAACA,KACrD2E,GAAwB1B,uBAE5B,WACIyB,KAIJhC,IAAuB,GACvB4B,IACE,SAACG,GAAD,OAAqBA,GAAmB9D,GAAe,EAAI,SAE5D,CAAC+D,GAAkB/D,KACtB,GAAgC6B,oBAAS,GAAzC,qBAAOoC,GAAP,MAAiBC,GAAjB,MACMC,GAAwB7B,uBAE5B,WACA4B,IAAY,KACX,IACGE,GAAe9B,uBAGnB,YAAmC,IAAf+B,EAAc,EAA/BC,cAAiBD,MAClBtC,IAAuB,GACvB4B,GACE3D,GAAeuE,SAASF,EAAO,IAAM,EAAgC,GAA3BE,SAASF,EAAO,IAAM,MAGpE,CAACrE,KAEGwE,GAAuBlC,uBAAY,WACvC4B,IAAY,KACX,IACH,GAAcO,YAAmBD,IAA1BE,GAAP,qBACMC,GAAWC,uBAAa,CAC5BC,aAAc,WACRd,KAIJhC,IAAuB,GACvB4B,IACE,SAACG,GAAD,OAAqBA,GAAmB9D,GAAe,EAAI,QAG/D8E,cAAe,WACTlB,KAIJ7B,IAAuB,GACvB4B,IACE,SAACG,GAAD,OAAqBA,GAAmB9D,GAAe,EAAI,UAIzD+E,GAAcrD,mBAAQ,kBAAMsD,MAAY,IAAxCD,UAiER,OA/DAE,qBAAU,WACR,IAAK/C,GAAQ,CACX,GAA+B,mBAApBK,GACT,OAMF,OAHAiB,QAAmB0B,QACnBpD,GAAeS,IAKc,mBAApBA,KAIXiB,GAAmBtE,GACnB4C,IAAe,MACd,CAACI,GAAQhD,EAAaqD,KAEzB4C,aAAa,WACX,GAAInF,GAAJ,CACE,GAAIyB,EACF,OAGFkC,IACE,SAACG,GAAD,OACoC,EAAlCL,KAAKC,MAAMI,EAAkB,IAC5B7C,EAAU+B,OAAS,IAAM,EAAI,EAAI,WAMxCW,IACE,SAACG,GAAD,OAGwC,GAFrCrC,GAAiBR,EAAU+B,OAAS,IAAM,EACvCS,KAAKC,MAAMI,EAAkB,GAC7BL,KAAK2B,KAAKtB,EAAkB,SAEnC,CAACrC,EAAezB,GAAciB,EAAU+B,SAE3CmC,aAAa,WACNpE,GAILA,EACEU,EACIpC,GACA6B,GAAM8B,OAAS3D,IAAeW,GAAe,EAAI,MAEtD,CAACX,GAAa0B,IAEjBoE,aAAa,WACNnE,GAILA,EAAkB9B,KACjB,CAACA,EAAa8B,IAGf,cAAC,IAAD,CAAYgB,OAAQA,GAApB,SACE,eAACnD,EAAD,yBACEI,OAAQA,EACRC,YAAaA,EACbF,aAAckD,IACVyC,IAJN,cAME,eAACxF,EAAD,WACE,cAACC,EAAD,CACEC,YAAaA,GACbC,UAAWA,GACXC,oBAAqBA,GAHvB,SAKG0D,KAEFW,GAAmB,KAClB,cAACpE,EAAD,CAAkBE,WAAW,OAAO2F,QAASxB,GAA7C,SACE,cAAC,IAAD,CAAelB,MAAM,OAAOC,KAAM,OAGrCmB,GAAmB,KAClB,cAACvE,EAAD,CAAkBE,WAAW,OAAO2F,QAASrB,GAA7C,SACE,cAAC,IAAD,CAAgBrB,MAAM,OAAOC,KAAM,UAIxCV,GACC,cAACxB,EAAD,CAAa2E,QAAS5C,GAAtB,SACE,cAAC,IAAD,CAASE,MAAM,OAAOC,KAAM,OAG9B,cAAC3C,EAAD,UACGgE,GACC,cAAC9D,EAAD,CAAeuE,IAAKA,GAApB,SACE,cAACrE,EAAD,CACEiF,SAAUlB,GACVmB,IACEvF,GAAekB,GAAM8B,OAASS,KAAK2B,KAAKlE,GAAM8B,OAAS,GAEzDwC,IAAK,EACLC,KAAM,EACNC,KAAK,QACLrB,MACErE,GACIX,GAAc,EACdoE,KAAKC,MAAMrE,GAAc,GAAK,MAKxC,eAACe,EAAD,WACE,eAACG,EAAD,WACE,eAACC,EAAD,CAAe6E,QAAShD,GAAxB,UACGK,GACArB,MAEF0D,GACC,eAACvE,EAAD,CAAe6E,QAAS7C,GAAxB,UACE,cAAC,IAAD,CAAcG,MAAM,OAAOC,KAAM,KAChCtB,KAED,QAEN,eAACd,EAAD,CAAe6E,QAASlB,GAAxB,UACE,cAAC,IAAD,CAAkBxB,MAAM,OAAOC,KAAM,KACpCrB,gBAeJoE,MAJf,SAA0BC,GACxB,MAAyB,qBAAXC,OAAyB,cAAClF,EAAD,eAAiBiF,IAAY,MC3WvDE,MAZf,YAAyD,IAAvCC,EAAsC,EAAtCA,SACVC,EAAaC,cACbC,EAAQxE,mBACZ,iBAAO,CACLyE,UAAWH,KAEb,CAACA,IAGH,OAAO,qBAAKE,MAAOA,EAAZ,SAAoBH,KCwCdK,MApDf,WACE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEvF,mBAAoB,EACpBC,oBAAoB,EACpBC,oBAAqB,SAAC1B,GACpBgH,QAAQC,IAAIjH,IAEd2B,kBAAmB,SAAC9B,GAClBmH,QAAQC,IAAIpH,IAEdgC,MAAO,CACL,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBAEFC,eAAgB,IAChBC,KAAM,CACJC,UAAW,eACXC,WAAY,qBACZC,KAAM,eACNC,OAAQ,kBAGZ,qCAEE,uBAFF,OAIE,uBAJF,OAME,uBANF,OAQE,uBARF,OAUE,uBAVF,OAYE,uBAZF,OAcE,uBAdF,OAgBE,uBAhBF,c,MC3BN+E,iBACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrI,M","file":"static/js/main.1ff9acf5.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  isExpansion: boolean;\n  isFullScreen: boolean;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  background: #333;\n  color: #fff;\n  display: grid;\n  grid-template: ${({ isFullScreen }) =>\n    `1fr ${isFullScreen ? \"0\" : \"40px\"} / 1fr`};\n  height: ${({ height, isExpansion }) =>\n    `${height - (isExpansion ? 0 : 95)}px`};\n  max-height: ${({ height, isExpansion }) => `${isExpansion ? height : 840}px`};\n  min-height: ${({ isExpansion }) => `${isExpansion ? 0 : 440}px`};\n  overflow: hidden;\n  position: relative;\n  transition: 250ms;\n`;\n\nexport const Viewer = styled.div`\n  height: 100%;\n  position: relative;\n`;\n\nexport type PagesWrapperProps = {\n  currentPage: number;\n  pageWidth: number;\n  switchingFullScreen: boolean;\n};\n\nexport const PagesWrapper = styled.div<PagesWrapperProps>`\n  direction: rtl;\n  display: grid;\n  grid-auto-flow: column;\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  transform: translateX(\n    calc(${({ currentPage, pageWidth }) => `${currentPage * pageWidth}px`})\n  );\n  transition: ${({ switchingFullScreen }) =>\n    `${switchingFullScreen ? 0 : 250}ms`};\n`;\n\nexport type NavigationButtonProps = {\n  navigation: \"next\" | \"prev\";\n};\n\nexport const NavigationButton = styled.a<NavigationButtonProps>`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  display: flex;\n  height: 100%;\n  justify-content: ${({ navigation }) =>\n    navigation === \"next\" ? \"flex-start\" : \"flex-end\"};\n  opacity: 0.5;\n  right: ${({ navigation }) => (navigation === \"next\" ? \"auto\" : \"0\")};\n  padding: 0;\n  position: absolute;\n  transition: 250ms;\n  width: calc(100% / 3);\n  :hover {\n    opacity: 1;\n  }\n  @media (max-width: 980px) {\n    opacity: 0;\n    :hover {\n      opacity: 0;\n    }\n  }\n`;\n\nexport type PageProps = {\n  width: number;\n};\n\nexport const Page = styled.div<PageProps>`\n  overflow: hidden;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport type ImgProps = {\n  isOdd: boolean;\n  isSingleView: boolean;\n};\n\nexport const Img = styled.img<ImgProps>`\n  height: 100%;\n  object-fit: contain;\n  object-position: ${({ isOdd, isSingleView }) =>\n    isSingleView ? \"center\" : isOdd ? \"left\" : \"right\"};\n  width: 100%;\n`;\n\nexport const Controller = styled.aside`\n  bottom: 0;\n  box-sizing: border-box;\n  height: 40px;\n  left: 0;\n  padding: 0 16px;\n  position: absolute;\n  width: 100%;\n`;\n\nexport const SubController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n`;\n\nexport const MainController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n`;\n\nexport const RangeInput = styled.input`\n  cursor: pointer;\n  max-width: 1024px;\n  transform: rotate(180deg);\n  width: 100%;\n`;\n\nexport const ScaleController = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  height: 100%;\n`;\n\nexport const ControlButton = styled.button`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  color: #ccc;\n  cursor: pointer;\n  display: grid;\n  font-size: 14px;\n  gap: 8px;\n  grid-template: auto / auto auto;\n  height: 100%;\n  outline: none;\n`;\n\nexport const CloseButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 12px 12px;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n","import React, {\n  ComponentPropsWithoutRef,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  CloseButton,\n  ControlButton,\n  Controller,\n  Img,\n  ImgProps,\n  MainController,\n  NavigationButton,\n  Page,\n  PageProps,\n  PagesWrapper,\n  PagesWrapperProps,\n  RangeInput,\n  ScaleController,\n  SubController,\n  Viewer,\n  Wrapper,\n  WrapperProps,\n} from \"./style\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport { nanoid } from \"nanoid\";\nimport {\n  BiChevronLeft,\n  BiChevronRight,\n  BiCollapse,\n  BiExpand,\n  BiFullscreen,\n  BiMoveHorizontal,\n} from \"react-icons/bi\";\nimport useOutsideClickRef from \"@rooks/use-outside-click-ref\";\nimport { CgClose } from \"react-icons/cg\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport useDidUpdate from \"@rooks/use-did-update\";\nimport screenfull from \"screenfull\";\n\nexport type ComicViewerProps = {\n  direction?: \"ltr\" | \"rtl\";\n  initialCurrentPage?: number;\n  initialIsExpansion?: boolean;\n  onChangeCurrentPage?: (currentPage: number) => void;\n  onChangeExpansion?: (isExpansion: boolean) => void;\n  pages: Array<string | ReactNode>;\n  switchingRatio?: number;\n  text?: Record<\"expansion\" | \"fullScreen\" | \"move\" | \"normal\", string>;\n};\n\nfunction ComicViewer({\n  direction = \"rtl\",\n  initialCurrentPage = 0,\n  initialIsExpansion = false,\n  onChangeCurrentPage,\n  onChangeExpansion,\n  pages: pagesProp,\n  switchingRatio = 1,\n  text = {\n    expansion: \"Expansion\",\n    fullScreen: \"Full screen\",\n    move: \"Move\",\n    normal: \"Normal\",\n  },\n}: ComicViewerProps): JSX.Element {\n  const isRightToLeft = useMemo(() => direction === \"rtl\", [direction]);\n  const {\n    expansion: expansionText,\n    fullScreen,\n    move,\n    normal,\n  } = useMemo(() => text, [text]);\n  const [width, height] = useWindowSize();\n  const [isExpansion, setIsExpansion] =\n    useState<WrapperProps[\"isExpansion\"]>(initialIsExpansion);\n  const [switchingFullScreen, setSwitchingFullScreen] =\n    useState<PagesWrapperProps[\"switchingFullScreen\"]>(false);\n  const handle = useFullScreenHandle();\n  const { active, enter, exit } = useMemo(() => handle, [handle]);\n  const handleClickOnExpansion = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setIsExpansion((prevIsExpansion) => !prevIsExpansion);\n  }, []);\n  const handleClickOnFullScreen = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    enter();\n  }, [enter]);\n  const handleClickOnClose = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    exit();\n  }, [exit]);\n  const pageWidth = useMemo<PageProps[\"width\"]>(\n    () => (height > width * switchingRatio ? width : width / 2),\n    [switchingRatio, height, width]\n  );\n  const expansion = useMemo<ComponentPropsWithoutRef<\"button\">[\"children\"]>(\n    () => (isExpansion ? normal : expansionText),\n    [expansionText, isExpansion, normal]\n  );\n  const expansionIcon = useMemo(\n    () =>\n      isExpansion ? (\n        <BiCollapse color=\"#fff\" size={24} />\n      ) : (\n        <BiExpand color=\"#fff\" size={24} />\n      ),\n    [isExpansion]\n  );\n  const isSingleView = useMemo<ImgProps[\"isSingleView\"]>(\n    () => height > width * switchingRatio,\n    [switchingRatio, height, width]\n  );\n  const pages = useMemo(() => {\n    if (isRightToLeft) {\n      return pagesProp;\n    }\n\n    const reversePages = pagesProp.slice().reverse();\n\n    if (isSingleView || reversePages.length % 2 === 0) {\n      return reversePages;\n    }\n\n    return [null, ...reversePages];\n  }, [isRightToLeft, isSingleView, pagesProp]);\n  const items = useMemo(\n    () =>\n      pages.map((page, index) => (\n        <Page key={nanoid()} width={pageWidth}>\n          {typeof page === \"string\" ? (\n            <Img\n              alt={page}\n              isOdd={!(index % 2)}\n              isSingleView={isSingleView}\n              src={page}\n            />\n          ) : (\n            page\n          )}\n        </Page>\n      )),\n    [isSingleView, pageWidth, pages]\n  );\n  const [prevIsExpansion, setPrevIsExpansion] = useState<\n    typeof isExpansion | undefined\n  >();\n  const [currentPage, setCurrentPage] = useState(() => {\n    const currentPage = isRightToLeft\n      ? initialCurrentPage\n      : pages.length - initialCurrentPage - 1;\n\n    return isSingleView ? currentPage : Math.floor(currentPage / 2) * 2;\n  });\n  const disabledNextPage = useMemo(\n    () =>\n      (isSingleView && currentPage >= pages.length - 1) ||\n      (!isSingleView && currentPage >= pages.length - 2),\n    [currentPage, isSingleView, pages.length]\n  );\n  const handleClickOnNextPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledNextPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n    );\n  }, [disabledNextPage, isSingleView]);\n  const disabledPrevPage = useMemo(() => currentPage === 0, [currentPage]);\n  const handleClickOnPrevPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledPrevPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n    );\n  }, [disabledPrevPage, isSingleView]);\n  const [showMove, setShowMove] = useState(false);\n  const handleClickOnShowMove = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setShowMove(true);\n  }, []);\n  const handleChange = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"input\">[\"onChange\"]>\n  >(\n    ({ currentTarget: { value } }) => {\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        isSingleView ? parseInt(value, 10) - 1 : (parseInt(value, 10) - 1) * 2\n      );\n    },\n    [isSingleView]\n  );\n  const handleClickOnOutside = useCallback(() => {\n    setShowMove(false);\n  }, []);\n  const [ref] = useOutsideClickRef(handleClickOnOutside);\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (disabledPrevPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n      );\n    },\n    onSwipedRight: () => {\n      if (disabledNextPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n      );\n    },\n  });\n  const { isEnabled } = useMemo(() => screenfull, []);\n\n  useEffect(() => {\n    if (!active) {\n      if (typeof prevIsExpansion !== \"boolean\") {\n        return;\n      }\n\n      setPrevIsExpansion(undefined);\n      setIsExpansion(prevIsExpansion);\n\n      return;\n    }\n\n    if (typeof prevIsExpansion === \"boolean\") {\n      return;\n    }\n\n    setPrevIsExpansion(isExpansion);\n    setIsExpansion(true);\n  }, [active, isExpansion, prevIsExpansion]);\n\n  useDidUpdate(() => {\n    if (isSingleView) {\n      if (isRightToLeft) {\n        return;\n      }\n\n      setCurrentPage(\n        (prevCurrentPage) =>\n          Math.floor(prevCurrentPage / 2) * 2 +\n          (pagesProp.length % 2 === 0 ? 1 : 0)\n      );\n\n      return;\n    }\n\n    setCurrentPage(\n      (prevCurrentPage) =>\n        (isRightToLeft || pagesProp.length % 2 === 0\n          ? Math.floor(prevCurrentPage / 2)\n          : Math.ceil(prevCurrentPage / 2)) * 2\n    );\n  }, [isRightToLeft, isSingleView, pagesProp.length]);\n\n  useDidUpdate(() => {\n    if (!onChangeCurrentPage) {\n      return;\n    }\n\n    onChangeCurrentPage(\n      isRightToLeft\n        ? currentPage\n        : pages.length - currentPage - (isSingleView ? 1 : 2)\n    );\n  }, [currentPage, onChangeCurrentPage]);\n\n  useDidUpdate(() => {\n    if (!onChangeExpansion) {\n      return;\n    }\n\n    onChangeExpansion(isExpansion);\n  }, [isExpansion, onChangeExpansion]);\n\n  return (\n    <FullScreen handle={handle}>\n      <Wrapper\n        height={height}\n        isExpansion={isExpansion}\n        isFullScreen={active}\n        {...handlers}\n      >\n        <Viewer>\n          <PagesWrapper\n            currentPage={currentPage}\n            pageWidth={pageWidth}\n            switchingFullScreen={switchingFullScreen}\n          >\n            {items}\n          </PagesWrapper>\n          {disabledNextPage ? null : (\n            <NavigationButton navigation=\"next\" onClick={handleClickOnNextPage}>\n              <BiChevronLeft color=\"#888\" size={64} />\n            </NavigationButton>\n          )}\n          {disabledPrevPage ? null : (\n            <NavigationButton navigation=\"prev\" onClick={handleClickOnPrevPage}>\n              <BiChevronRight color=\"#888\" size={64} />\n            </NavigationButton>\n          )}\n        </Viewer>\n        {active ? (\n          <CloseButton onClick={handleClickOnClose}>\n            <CgClose color=\"#fff\" size={36} />\n          </CloseButton>\n        ) : (\n          <Controller>\n            {showMove ? (\n              <SubController ref={ref}>\n                <RangeInput\n                  onChange={handleChange}\n                  max={\n                    isSingleView ? pages.length : Math.ceil(pages.length / 2)\n                  }\n                  min={1}\n                  step={1}\n                  type=\"range\"\n                  value={\n                    isSingleView\n                      ? currentPage + 1\n                      : Math.floor(currentPage / 2) + 1\n                  }\n                />\n              </SubController>\n            ) : (\n              <MainController>\n                <ScaleController>\n                  <ControlButton onClick={handleClickOnExpansion}>\n                    {expansionIcon}\n                    {expansion}\n                  </ControlButton>\n                  {isEnabled ? (\n                    <ControlButton onClick={handleClickOnFullScreen}>\n                      <BiFullscreen color=\"#fff\" size={24} />\n                      {fullScreen}\n                    </ControlButton>\n                  ) : null}\n                </ScaleController>\n                <ControlButton onClick={handleClickOnShowMove}>\n                  <BiMoveHorizontal color=\"#fff\" size={24} />\n                  {move}\n                </ControlButton>\n              </MainController>\n            )}\n          </Controller>\n        )}\n      </Wrapper>\n    </FullScreen>\n  );\n}\n\nfunction NoSSRComicViewer(props: ComicViewerProps): JSX.Element | null {\n  return typeof window !== \"undefined\" ? <ComicViewer {...props} /> : null;\n}\n\nexport default NoSSRComicViewer;\n","import { ComponentPropsWithoutRef, ReactNode, useMemo } from \"react\";\nimport { useWindowHeight } from \"@react-hook/window-size\";\n\nexport type LayoutProps = {\n  children: ReactNode;\n};\n\nfunction Layout({ children }: LayoutProps): JSX.Element {\n  const onlyHeight = useWindowHeight();\n  const style = useMemo<ComponentPropsWithoutRef<\"div\">[\"style\"]>(\n    () => ({\n      minHeight: onlyHeight,\n    }),\n    [onlyHeight]\n  );\n\n  return <div style={style}>{children}</div>;\n}\n\nexport default Layout;\n","import ComicViewer from \"index\";\nimport Layout from \"components/Layout\";\nimport React from \"react\";\n\nfunction Pages(): JSX.Element {\n  return (\n    <Layout>\n      <ComicViewer\n        initialCurrentPage={2}\n        initialIsExpansion={false}\n        onChangeCurrentPage={(currentPage) => {\n          console.log(currentPage);\n        }}\n        onChangeExpansion={(isExpansion) => {\n          console.log(isExpansion);\n        }}\n        pages={[\n          \"/comics/0.jpg\",\n          \"/comics/1.jpg\",\n          \"/comics/2.jpg\",\n          \"/comics/3.jpg\",\n          \"/comics/4.jpg\",\n          \"/comics/5.jpg\",\n          \"/comics/6.jpg\",\n        ]}\n        switchingRatio={0.75}\n        text={{\n          expansion: \"拡大\",\n          fullScreen: \"全画面\",\n          move: \"移動\",\n          normal: \"通常\",\n        }}\n      />\n      <p>\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n        <br />\n        hoge\n      </p>\n    </Layout>\n  );\n}\n\nexport default Pages;\n","import React, { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\nimport Pages from \"./pages\";\nimport \"./styles/global.scss\";\n\nrender(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}